// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: smq.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SuhaibMessageQueue_Connect_FullMethodName           = "/smq.SuhaibMessageQueue/Connect"
	SuhaibMessageQueue_GetLatestOffset_FullMethodName   = "/smq.SuhaibMessageQueue/GetLatestOffset"
	SuhaibMessageQueue_GetEarliestOffset_FullMethodName = "/smq.SuhaibMessageQueue/GetEarliestOffset"
	SuhaibMessageQueue_CreateTopic_FullMethodName       = "/smq.SuhaibMessageQueue/CreateTopic"
	SuhaibMessageQueue_Produce_FullMethodName           = "/smq.SuhaibMessageQueue/Produce"
	SuhaibMessageQueue_Consume_FullMethodName           = "/smq.SuhaibMessageQueue/Consume"
	SuhaibMessageQueue_StreamProduce_FullMethodName     = "/smq.SuhaibMessageQueue/StreamProduce"
	SuhaibMessageQueue_StreamConsume_FullMethodName     = "/smq.SuhaibMessageQueue/StreamConsume"
	SuhaibMessageQueue_DeleteUntilOffset_FullMethodName = "/smq.SuhaibMessageQueue/DeleteUntilOffset"
)

// SuhaibMessageQueueClient is the client API for SuhaibMessageQueue service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SuhaibMessageQueueClient interface {
	Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectResponse, error)
	GetLatestOffset(ctx context.Context, in *GetLatestOffsetRequest, opts ...grpc.CallOption) (*GetLatestOffsetResponse, error)
	GetEarliestOffset(ctx context.Context, in *GetEarliestOffsetRequest, opts ...grpc.CallOption) (*GetEarliestOffsetResponse, error)
	CreateTopic(ctx context.Context, in *CreateTopicRequest, opts ...grpc.CallOption) (*CreateTopicResponse, error)
	// Single message versions
	Produce(ctx context.Context, in *ProduceRequest, opts ...grpc.CallOption) (*ProduceResponse, error)
	Consume(ctx context.Context, in *ConsumeRequest, opts ...grpc.CallOption) (*ConsumeResponse, error)
	// Stream versions
	StreamProduce(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ProduceRequest, ProduceResponse], error)
	StreamConsume(ctx context.Context, in *ConsumeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ConsumeResponse], error)
	DeleteUntilOffset(ctx context.Context, in *DeleteUntilOffsetRequest, opts ...grpc.CallOption) (*DeleteUntilOffsetResponse, error)
}

type suhaibMessageQueueClient struct {
	cc grpc.ClientConnInterface
}

func NewSuhaibMessageQueueClient(cc grpc.ClientConnInterface) SuhaibMessageQueueClient {
	return &suhaibMessageQueueClient{cc}
}

func (c *suhaibMessageQueueClient) Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConnectResponse)
	err := c.cc.Invoke(ctx, SuhaibMessageQueue_Connect_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suhaibMessageQueueClient) GetLatestOffset(ctx context.Context, in *GetLatestOffsetRequest, opts ...grpc.CallOption) (*GetLatestOffsetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLatestOffsetResponse)
	err := c.cc.Invoke(ctx, SuhaibMessageQueue_GetLatestOffset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suhaibMessageQueueClient) GetEarliestOffset(ctx context.Context, in *GetEarliestOffsetRequest, opts ...grpc.CallOption) (*GetEarliestOffsetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEarliestOffsetResponse)
	err := c.cc.Invoke(ctx, SuhaibMessageQueue_GetEarliestOffset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suhaibMessageQueueClient) CreateTopic(ctx context.Context, in *CreateTopicRequest, opts ...grpc.CallOption) (*CreateTopicResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTopicResponse)
	err := c.cc.Invoke(ctx, SuhaibMessageQueue_CreateTopic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suhaibMessageQueueClient) Produce(ctx context.Context, in *ProduceRequest, opts ...grpc.CallOption) (*ProduceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProduceResponse)
	err := c.cc.Invoke(ctx, SuhaibMessageQueue_Produce_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suhaibMessageQueueClient) Consume(ctx context.Context, in *ConsumeRequest, opts ...grpc.CallOption) (*ConsumeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConsumeResponse)
	err := c.cc.Invoke(ctx, SuhaibMessageQueue_Consume_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suhaibMessageQueueClient) StreamProduce(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ProduceRequest, ProduceResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SuhaibMessageQueue_ServiceDesc.Streams[0], SuhaibMessageQueue_StreamProduce_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ProduceRequest, ProduceResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SuhaibMessageQueue_StreamProduceClient = grpc.ClientStreamingClient[ProduceRequest, ProduceResponse]

func (c *suhaibMessageQueueClient) StreamConsume(ctx context.Context, in *ConsumeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ConsumeResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SuhaibMessageQueue_ServiceDesc.Streams[1], SuhaibMessageQueue_StreamConsume_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ConsumeRequest, ConsumeResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SuhaibMessageQueue_StreamConsumeClient = grpc.ServerStreamingClient[ConsumeResponse]

func (c *suhaibMessageQueueClient) DeleteUntilOffset(ctx context.Context, in *DeleteUntilOffsetRequest, opts ...grpc.CallOption) (*DeleteUntilOffsetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUntilOffsetResponse)
	err := c.cc.Invoke(ctx, SuhaibMessageQueue_DeleteUntilOffset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SuhaibMessageQueueServer is the server API for SuhaibMessageQueue service.
// All implementations must embed UnimplementedSuhaibMessageQueueServer
// for forward compatibility.
type SuhaibMessageQueueServer interface {
	Connect(context.Context, *ConnectRequest) (*ConnectResponse, error)
	GetLatestOffset(context.Context, *GetLatestOffsetRequest) (*GetLatestOffsetResponse, error)
	GetEarliestOffset(context.Context, *GetEarliestOffsetRequest) (*GetEarliestOffsetResponse, error)
	CreateTopic(context.Context, *CreateTopicRequest) (*CreateTopicResponse, error)
	// Single message versions
	Produce(context.Context, *ProduceRequest) (*ProduceResponse, error)
	Consume(context.Context, *ConsumeRequest) (*ConsumeResponse, error)
	// Stream versions
	StreamProduce(grpc.ClientStreamingServer[ProduceRequest, ProduceResponse]) error
	StreamConsume(*ConsumeRequest, grpc.ServerStreamingServer[ConsumeResponse]) error
	DeleteUntilOffset(context.Context, *DeleteUntilOffsetRequest) (*DeleteUntilOffsetResponse, error)
	mustEmbedUnimplementedSuhaibMessageQueueServer()
}

// UnimplementedSuhaibMessageQueueServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSuhaibMessageQueueServer struct{}

func (UnimplementedSuhaibMessageQueueServer) Connect(context.Context, *ConnectRequest) (*ConnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedSuhaibMessageQueueServer) GetLatestOffset(context.Context, *GetLatestOffsetRequest) (*GetLatestOffsetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestOffset not implemented")
}
func (UnimplementedSuhaibMessageQueueServer) GetEarliestOffset(context.Context, *GetEarliestOffsetRequest) (*GetEarliestOffsetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEarliestOffset not implemented")
}
func (UnimplementedSuhaibMessageQueueServer) CreateTopic(context.Context, *CreateTopicRequest) (*CreateTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTopic not implemented")
}
func (UnimplementedSuhaibMessageQueueServer) Produce(context.Context, *ProduceRequest) (*ProduceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Produce not implemented")
}
func (UnimplementedSuhaibMessageQueueServer) Consume(context.Context, *ConsumeRequest) (*ConsumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Consume not implemented")
}
func (UnimplementedSuhaibMessageQueueServer) StreamProduce(grpc.ClientStreamingServer[ProduceRequest, ProduceResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamProduce not implemented")
}
func (UnimplementedSuhaibMessageQueueServer) StreamConsume(*ConsumeRequest, grpc.ServerStreamingServer[ConsumeResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamConsume not implemented")
}
func (UnimplementedSuhaibMessageQueueServer) DeleteUntilOffset(context.Context, *DeleteUntilOffsetRequest) (*DeleteUntilOffsetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUntilOffset not implemented")
}
func (UnimplementedSuhaibMessageQueueServer) mustEmbedUnimplementedSuhaibMessageQueueServer() {}
func (UnimplementedSuhaibMessageQueueServer) testEmbeddedByValue()                            {}

// UnsafeSuhaibMessageQueueServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SuhaibMessageQueueServer will
// result in compilation errors.
type UnsafeSuhaibMessageQueueServer interface {
	mustEmbedUnimplementedSuhaibMessageQueueServer()
}

func RegisterSuhaibMessageQueueServer(s grpc.ServiceRegistrar, srv SuhaibMessageQueueServer) {
	// If the following call pancis, it indicates UnimplementedSuhaibMessageQueueServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SuhaibMessageQueue_ServiceDesc, srv)
}

func _SuhaibMessageQueue_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuhaibMessageQueueServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuhaibMessageQueue_Connect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuhaibMessageQueueServer).Connect(ctx, req.(*ConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuhaibMessageQueue_GetLatestOffset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestOffsetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuhaibMessageQueueServer).GetLatestOffset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuhaibMessageQueue_GetLatestOffset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuhaibMessageQueueServer).GetLatestOffset(ctx, req.(*GetLatestOffsetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuhaibMessageQueue_GetEarliestOffset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEarliestOffsetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuhaibMessageQueueServer).GetEarliestOffset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuhaibMessageQueue_GetEarliestOffset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuhaibMessageQueueServer).GetEarliestOffset(ctx, req.(*GetEarliestOffsetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuhaibMessageQueue_CreateTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuhaibMessageQueueServer).CreateTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuhaibMessageQueue_CreateTopic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuhaibMessageQueueServer).CreateTopic(ctx, req.(*CreateTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuhaibMessageQueue_Produce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProduceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuhaibMessageQueueServer).Produce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuhaibMessageQueue_Produce_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuhaibMessageQueueServer).Produce(ctx, req.(*ProduceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuhaibMessageQueue_Consume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuhaibMessageQueueServer).Consume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuhaibMessageQueue_Consume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuhaibMessageQueueServer).Consume(ctx, req.(*ConsumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuhaibMessageQueue_StreamProduce_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SuhaibMessageQueueServer).StreamProduce(&grpc.GenericServerStream[ProduceRequest, ProduceResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SuhaibMessageQueue_StreamProduceServer = grpc.ClientStreamingServer[ProduceRequest, ProduceResponse]

func _SuhaibMessageQueue_StreamConsume_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConsumeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SuhaibMessageQueueServer).StreamConsume(m, &grpc.GenericServerStream[ConsumeRequest, ConsumeResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SuhaibMessageQueue_StreamConsumeServer = grpc.ServerStreamingServer[ConsumeResponse]

func _SuhaibMessageQueue_DeleteUntilOffset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUntilOffsetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuhaibMessageQueueServer).DeleteUntilOffset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuhaibMessageQueue_DeleteUntilOffset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuhaibMessageQueueServer).DeleteUntilOffset(ctx, req.(*DeleteUntilOffsetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SuhaibMessageQueue_ServiceDesc is the grpc.ServiceDesc for SuhaibMessageQueue service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SuhaibMessageQueue_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smq.SuhaibMessageQueue",
	HandlerType: (*SuhaibMessageQueueServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connect",
			Handler:    _SuhaibMessageQueue_Connect_Handler,
		},
		{
			MethodName: "GetLatestOffset",
			Handler:    _SuhaibMessageQueue_GetLatestOffset_Handler,
		},
		{
			MethodName: "GetEarliestOffset",
			Handler:    _SuhaibMessageQueue_GetEarliestOffset_Handler,
		},
		{
			MethodName: "CreateTopic",
			Handler:    _SuhaibMessageQueue_CreateTopic_Handler,
		},
		{
			MethodName: "Produce",
			Handler:    _SuhaibMessageQueue_Produce_Handler,
		},
		{
			MethodName: "Consume",
			Handler:    _SuhaibMessageQueue_Consume_Handler,
		},
		{
			MethodName: "DeleteUntilOffset",
			Handler:    _SuhaibMessageQueue_DeleteUntilOffset_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamProduce",
			Handler:       _SuhaibMessageQueue_StreamProduce_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamConsume",
			Handler:       _SuhaibMessageQueue_StreamConsume_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "smq.proto",
}
